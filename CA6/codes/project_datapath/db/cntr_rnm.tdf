--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV GX" lpm_avalue=0 lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_svalue=0 lpm_width=3 aclr aset clock cnt_en cout q sset CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:51:SJ cbx_lpm_add_sub 2020:06:05:12:04:51:SJ cbx_lpm_compare 2020:06:05:12:04:51:SJ cbx_lpm_counter 2020:06:05:12:04:51:SJ cbx_lpm_decode 2020:06:05:12:04:51:SJ cbx_mgl 2020:06:05:12:11:10:SJ cbx_nadder 2020:06:05:12:04:51:SJ cbx_stratix 2020:06:05:12:04:51:SJ cbx_stratixii 2020:06:05:12:04:51:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION cycloneiv_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 3 mux21 6 reg 3 
OPTIONS ALTERA_INTERNAL_OPTION = "suppress_da_rule_internal=a101;suppress_da_rule_internal=s102;suppress_da_rule_internal=s103";

SUBDESIGN cntr_rnm
( 
	aclr	:	input;
	aset	:	input;
	clock	:	input;
	cnt_en	:	input;
	cout	:	output;
	q[2..0]	:	output;
	sset	:	input;
) 
VARIABLE 
	counter_comb_bita0 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita1 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita2 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_reg_bit[2..0] : dffeas;
	mux211_dataout	:	WIRE;
	mux212_dataout	:	WIRE;
	mux213_dataout	:	WIRE;
	mux214_dataout	:	WIRE;
	mux215_dataout	:	WIRE;
	mux216_dataout	:	WIRE;
	a_val[2..0]	: WIRE;
	aclr_actual	: WIRE;
	aload	: NODE;
	clk_en	: NODE;
	cout_actual	: WIRE;
	data[2..0]	: NODE;
	external_cin	: WIRE;
	latch_signal[2..0]	: WIRE;
	pre_hazard[2..0]	: WIRE;
	pre_latch_signal[2..0]	: WIRE;
	s_val[2..0]	: WIRE;
	safe_q[2..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_comb_bita[2..0].cin = ( counter_comb_bita[1..0].cout, external_cin);
	counter_comb_bita[2..0].dataa = ( (! pre_hazard[2..2]), (! pre_hazard[1..1]), (! pre_hazard[0..0]));
	counter_comb_bita[2..0].datab = ( updown_dir, updown_dir, updown_dir);
	counter_comb_bita[2..0].datad = ( B"1", B"1", B"1");
	counter_reg_bit[].asdata = ((! latch_signal[]) $ ((! sclr) & ((sset & s_val[]) # ((! sset) & data[]))));
	counter_reg_bit[].clk = clock;
	counter_reg_bit[].clrn = (! aclr_actual);
	counter_reg_bit[].d = ( ((! latch_signal[2..2]) $ counter_comb_bita[2].combout), ((! latch_signal[1..1]) $ counter_comb_bita[1].combout), ((! latch_signal[0..0]) $ counter_comb_bita[0].combout));
	counter_reg_bit[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit[].sload = ((sclr # sset) # sload);
	mux211_dataout = aload & (! data[0..0]) # !(aload) & pre_latch_signal[0..0];
	mux212_dataout = aset & (! a_val[0..0]) # !(aset) & mux211_dataout;
	mux213_dataout = aload & (! data[1..1]) # !(aload) & pre_latch_signal[1..1];
	mux214_dataout = aset & (! a_val[1..1]) # !(aset) & mux213_dataout;
	mux215_dataout = aload & (! data[2..2]) # !(aload) & pre_latch_signal[2..2];
	mux216_dataout = aset & (! a_val[2..2]) # !(aset) & mux215_dataout;
	a_val[] = B"000";
	aclr_actual = ((aclr # aset) # aload);
	aload = GND;
	clk_en = VCC;
	cout = cout_actual;
	cout_actual = (counter_comb_bita[2].cout # (time_to_clear & updown_dir));
	data[] = GND;
	external_cin = B"1";
	latch_signal[] = ( (aclr # mux216_dataout), (aclr # mux214_dataout), (aclr # mux212_dataout));
	pre_hazard[] = (latch_signal[] $ counter_reg_bit[].q);
	pre_latch_signal[] = latch_signal[];
	q[] = safe_q[];
	s_val[] = B"000";
	safe_q[] = ((! aclr) & ((aset & a_val[]) # ((! aset) & ((aload & data[]) # ((! aload) & (! pre_hazard[]))))));
	sclr = GND;
	sload = GND;
	time_to_clear = B"0";
	updown_dir = B"1";
	ASSERT (0) 
	REPORT "Counter will power up to an undefined state.  An asynchronous signal should be asserted before the counter reaches a known state."
	SEVERITY WARNING;
END;
--VALID FILE
