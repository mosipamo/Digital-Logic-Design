--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV GX" lpm_direction="DOWN" lpm_port_updown="PORT_UNUSED" lpm_width=8 aclr clock cnt_en cout data q sload CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:51:SJ cbx_lpm_add_sub 2020:06:05:12:04:51:SJ cbx_lpm_compare 2020:06:05:12:04:51:SJ cbx_lpm_counter 2020:06:05:12:04:51:SJ cbx_lpm_decode 2020:06:05:12:04:51:SJ cbx_mgl 2020:06:05:12:11:10:SJ cbx_nadder 2020:06:05:12:04:51:SJ cbx_stratix 2020:06:05:12:04:51:SJ cbx_stratixii 2020:06:05:12:04:51:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION cycloneiv_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 8 reg 8 
SUBDESIGN cntr_skk
( 
	aclr	:	input;
	clock	:	input;
	cnt_en	:	input;
	cout	:	output;
	data[7..0]	:	input;
	q[7..0]	:	output;
	sload	:	input;
) 
VARIABLE 
	counter_comb_bita0 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita1 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita2 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita3 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita4 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita5 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita6 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita7 : cycloneiv_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_reg_bit[7..0] : dffeas;
	aclr_actual	: WIRE;
	clk_en	: NODE;
	cout_actual	: WIRE;
	external_cin	: WIRE;
	s_val[7..0]	: WIRE;
	safe_q[7..0]	: WIRE;
	sclr	: NODE;
	sset	: NODE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_comb_bita[7..0].cin = ( counter_comb_bita[6..0].cout, external_cin);
	counter_comb_bita[7..0].dataa = ( counter_reg_bit[7..0].q);
	counter_comb_bita[7..0].datab = ( updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir, updown_dir);
	counter_comb_bita[7..0].datad = ( B"1", B"1", B"1", B"1", B"1", B"1", B"1", B"1");
	counter_reg_bit[].asdata = ((! sclr) & ((sset & s_val[]) # ((! sset) & data[])));
	counter_reg_bit[].clk = clock;
	counter_reg_bit[].clrn = (! aclr_actual);
	counter_reg_bit[].d = ( counter_comb_bita[7..0].combout);
	counter_reg_bit[].ena = (clk_en & (((sclr # sset) # sload) # cnt_en));
	counter_reg_bit[].sload = ((sclr # sset) # sload);
	aclr_actual = aclr;
	clk_en = VCC;
	cout = cout_actual;
	cout_actual = (counter_comb_bita[7].cout # (time_to_clear & updown_dir));
	external_cin = B"1";
	q[] = safe_q[];
	s_val[] = B"11111111";
	safe_q[] = counter_reg_bit[].q;
	sclr = GND;
	sset = GND;
	time_to_clear = B"0";
	updown_dir = B"0";
END;
--VALID FILE
